#include <features.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <unistd.h>
#include <asm/types.h>
#include <sys/types.h>
#include <linux/if_packet.h>
#include <linux/if_ether.h> 
#include <linux/if_arcnet.h> 
#include <linux/version.h>
#include <net/if.h>
#include <net/if_arp.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <signal.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <ctype.h>

#define BUFFER_SIZE 508
#define BUFFERLEN 508

int
main() {

FILE *file_fd=fopen("3new.jpg","a+");
unsigned char buf[BUFFERLEN];
  /* ポート番号、ソケット */
  unsigned short port = 9876;
  int recvSocket;

  /* sockaddr_in 構造体 */
  struct sockaddr_in recvSockAddr;

  /* 各種パラメータ */
  int status;
  int numrcv;
  char buffer[BUFFER_SIZE];
  unsigned long on = 1;

  /************************************************************/
  /* sockaddr_in 構造体のセット */
  memset(&recvSockAddr, 0, sizeof(recvSockAddr));
  recvSockAddr.sin_port = htons(port);
  recvSockAddr.sin_family = AF_INET;
  recvSockAddr.sin_addr.s_addr = htonl(INADDR_ANY);

  /* ソケット生成 */
  recvSocket = socket(AF_INET, SOCK_DGRAM, 0);
 
  /* バインド */
  status = bind(recvSocket, (struct sockaddr *)&recvSockAddr, sizeof(recvSockAddr));

  /* パケット受信 */

 int recvSequence = 0;
	
	while(1) {
         	printf("recv from client ...\n");
    		int writeBytes=0;
    		int recvBytes=recvfrom(recvSocket, buffer, BUFFER_SIZE, 0, NULL, NULL);
    		if(recvBytes<0)
     		{
      		printf("recv error!\n");
      		exit(1);
      		}
      	else if(recvBytes>0)
       		{
        		recvSequence++;
        		printf("%d recv from client: %d bytes\n",recvSequence,recvBytes);
        	}  
        	else if(recvBytes==0)
         	{
          		printf("one picture recv over!\n");
          		break;
			exit(0);
          	}
		//hexdump(buf, recvBytes);
     		writeBytes=fwrite(buffer,recvBytes,1,file_fd);
     		printf("write to file: %d bytes \n",writeBytes); 
     		bzero(buf,sizeof(buf));   
   	}
   	printf("one picture write to file over!\n");  
 
	if(fclose(file_fd)!=0)
      	{
       	printf("fclose() error! \n");
       	}
      else
       {
         printf("fclose ##file_fd## success!\n");
       }
}
