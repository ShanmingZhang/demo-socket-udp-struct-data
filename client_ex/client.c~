#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

int
main() {
  pd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
	if (pd == -1) {
		perror("socket():");
		exit(1);
	}
DEBUG("interface index: ");

	/* get interface index number */
	memset(&ifr, 0, sizeof(ifr));
	strncpy(ifr.ifr_name, interface, IFNAMSIZ);
	if (ioctl(pd, SIOCGIFINDEX, &ifr) == -1) {
		perror("SIOCGIFINDEX");
		exit(1);
	}
	ifindex = ifr.ifr_ifindex;
	DEBUG("%d\n", ifindex);

/*
	 * bind(2) uses only sll_protocol and sll_ifindex. see packet(7)
	 */
	memset(&sll, 0xff, sizeof(sll));
	sll.sll_family = AF_PACKET;	/* allways AF_PACKET */
	sll.sll_protocol = htons(ETH_P_ALL);
	sll.sll_ifindex = ifindex;
	if (bind(pd, (struct sockaddr *)&sll, sizeof sll) == -1) {
		perror("bind():");
		exit(1);
	}

	DEBUG("flush receive buffer\n");

/* 
	 * first, flush all received packets. 
	 *
         * raw-socket receives packets from all interfaces,
	 * while the socket is not binded to a interface
         */
	do {
		fd_set fds;
		struct timeval t;
		FD_ZERO(&fds);	
		FD_SET(pd, &fds);
		memset(&t, 0, sizeof(t));
		i = select(FD_SETSIZE, &fds, NULL, NULL, &t);
		if (i > 0)
			recv(pd, buf, i, 0);
	} while (i);
 
  /* パケット送出 */
  for(i=0; i<10; i++) {
    printf("sending...\n");
    char tmp[MAXPACKETLEN];
	struct sockaddr_ll sll;
	int c;

	c = buildpacket(tmp, src, dst, buf, count);
	if (c == 0)
		return -1;
	memset(&sll, 0, sizeof(sll));
	sll.sll_ifindex = ifindex;
	c = sendto(pd, tmp, c, 0, (struct sockaddr *)&sll, sizeof(sll));
	if (c == -1)
		perror("sendto():");
	printf ("send %d bytes (including headers)\n", c);
    sleep(1);
  }

  /* ソケットの終了 */
  close(destSocket);
}
